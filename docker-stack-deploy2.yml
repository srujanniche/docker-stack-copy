version: "3"
services:
  traefik:
    image: traefik:v1.6
    command: --web \
      --docker \
      --docker.swarmmode \
      --docker.domain=traefik \
      --docker.watch \
      --logLevel=DEBUG
    networks:
      - traefik-net
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    deploy:
      placement:
        constraints: [node.role==manager]
  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:9.4
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
      - traefik-net
    depends_on:
      - redis
    deploy:
      replicas: 2
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=mystack_traefik-net"
        - "traefik.frontend.rule=Host:vote.awscoffeeshop.xyz"
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
      - traefik-net
    depends_on:
      - db
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.docker.network=mystack_traefik-net"
        - "traefik.frontend.rule=Host:result.awscoffeeshop.xyz"
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:
  traefik-net:
volumes:
  db-data: